name: Build and Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }}
  REGION: us-central1 # Adjust this as necessary
  GCR_HOSTNAME: gcr.io

jobs:
  setup-build-publish-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necessary to fetch all tags and history

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          version: 'latest'
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Determine new version
        id: versioning
        run: |
          git fetch --tags
          # Check if any tags exist
          if [ $(git tag | wc -l) -eq 0 ]; then
            echo "No tags found. Please create an initial tag."
            exit 1  # Exit with error if no tags are found
          else
            LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          fi
          echo "Latest tag is $LATEST_TAG"
          # Prepare the next tag
          NEXT_TAG="v$(echo $LATEST_TAG | sed 's/v//g' | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')"
          echo "Attempting new tag $NEXT_TAG"
          # Check if the NEXT_TAG already exists
          if git rev-parse "$NEXT_TAG" >/dev/null 2>&1; then
            echo "New tag $NEXT_TAG already exists. Using the latest tag $LATEST_TAG instead."
            # If NEXT_TAG exists, we stick with LATEST_TAG and do not create a new one.
            echo "NEW_TAG=$LATEST_TAG" >> $GITHUB_ENV
          else
            echo "New tag is $NEXT_TAG"
            git tag $NEXT_TAG
            git push origin $NEXT_TAG
            # Use the successfully created new tag.
            echo "NEW_TAG=$NEXT_TAG" >> $GITHUB_ENV
          fi
     

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Build and push Docker image using Cloud Build
        run: |
          gcloud builds submit --tag $GCR_HOSTNAME/$PROJECT_ID/$SERVICE_NAME:${{ steps.versioning.outputs.new_tag }} .

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image=$GCR_HOSTNAME/$PROJECT_ID/$SERVICE_NAME:${{ steps.versioning.outputs.new_tag }} \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated
